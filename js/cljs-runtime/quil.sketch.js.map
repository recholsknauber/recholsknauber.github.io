{"version":3,"sources":["quil/sketch.cljs"],"mappings":"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","names":["quil.sketch/*applet*","quil.sketch/current-applet","js/p5.prototype","quil.sketch/rendering-modes","quil.sketch/resolve-renderer","mode","cljs.core._EQ_","quil.util/resolve-constant-key","quil.sketch/set-size","applet","width","height","temp__5804__auto__","el","inner-canvas","js/window","goog.style/getComputedStyle","var_args","G__16491","quil.sketch/size","js/Error","quil.sketch/bind-handlers","prc","opts","seq__16492","cljs.core/seq","chunk__16493","count__16494","i__16495","vec__16506","cljs.core.nth","cljs.core/chunked-seq?","c__5568__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__16511","cljs.core/first","cljs.core/next","processing-name","quil-name","handler","cljs.core/name","args","*applet*-orig-val__16509","*applet*-temp-val__16510","*applet*-orig-val__16514","*applet*-temp-val__16515","cljs.core.apply","quil.sketch/in-fullscreen?","or__5045__auto__","js/document","quil.sketch/add-fullscreen-support","old-size","cljs.core.atom","adjust-canvas-size","cljs.core/reset!","cljs.core/deref","goog.events/listen","goog.events.EventType/KEYDOWN","event","cljs.core/not","canvas","js/console","p1__16516#","quil.sketch/make-sketch","options","cljs.core/cons","quil.middlewares.deprecated-options/deprecated-options","cljs.core/comp","p1__16517#","cljs.core.merge","sketch-size","renderer","features","cljs.core/set","setup","cljs.core.concat","fexpr__16518","fexpr__16519","mouse-wheel","wheel-handler","evt","G__16520","quil.sketch.goog$module$goog$object.get","cljs.core.assoc","sketch","quil.util/initial-internal-state","quil.sketch/destroy-previous-sketch","host-elem","proc-obj","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","quil.sketch/sketch","seq16521","self__5755__auto__","opts-map","cljs.core/hash-map","js/p5","quil.sketch/sketch-init-list","quil.sketch/empty-body?","child","quil.sketch/add-canvas","canvas-id","quil.sketch/init-sketches","add-elem?","seq__16522","chunk__16523","count__16524","i__16525","sk","fexpr__16528","fexpr__16529","quil.sketch/add-sketch-to-init-list","cljs.core.swap_BANG_","cljs.core/conj","goog.events/listenOnce","goog.events.EventType/LOAD","cljs.core/List"],"sourcesContent":["(ns quil.sketch\n  (:require [quil.util :as u :include-macros true]\n            [quil.middlewares.deprecated-options :as do]\n            [goog.dom :as dom]\n            [goog.events :as events]\n            [goog.style :as style]\n            [goog.object :as object]\n            [goog.events.EventType :as EventType])\n  (:require-macros [quil.sketch]))\n\n(def ^:dynamic\n  *applet* nil)\n\n(defn current-applet [] *applet*)\n\n(u/generate-quil-constants :cljs\n                           rendering-modes (:java2d :p2d :p3d :opengl))\n\n(defn resolve-renderer [mode]\n  (if (= :p3d mode)\n    (aget js/p5.prototype \"WEBGL\")\n    (u/resolve-constant-key mode rendering-modes)))\n\n(defn set-size [applet width height]\n  (when-let [el (.-quil-canvas applet)]\n    ; p5js creates a <canvas> element inside provided <div> element\n    ; we need to resize only the canvas as outer div will adapt automatically\n    (let [inner-canvas (.querySelector el \"canvas\")]\n      (.resizeCanvas applet width height)\n      (.setAttribute inner-canvas \"width\" width)\n      (.setAttribute inner-canvas \"height\" height)\n      (aset (.-style inner-canvas) \"width\" (str width \"px\"))\n      (aset (.-style inner-canvas) \"height\" (str height \"px\"))\n      (set! (.-width applet)\n            (.parseInt js/window (style/getComputedStyle inner-canvas \"width\")))\n      (set! (.-height applet)\n            (.parseInt js/window (style/getComputedStyle inner-canvas \"height\"))))))\n\n(defn size\n  ([width height]\n   (.createCanvas (current-applet) (int width) (int height)))\n\n  ([width height mode]\n   (.createCanvas (current-applet) (int width) (int height) (resolve-renderer mode))))\n\n(defn- bind-handlers [prc opts]\n  (doseq [[processing-name quil-name] {:setup :setup\n                                       :draw :draw\n\n                                       :keyPressed :key-pressed\n                                       :keyReleased :key-released\n                                       :keyTyped :key-typed\n\n                                       :mouseClicked :mouse-clicked\n                                       :mouseDragged :mouse-dragged\n                                       :mouseMoved :mouse-moved\n                                       :mousePressed :mouse-pressed\n                                       :mouseReleased :mouse-released\n                                       :mouseOut :mouse-exited\n                                       :mouseOver :mouse-entered\n                                       :mouseWheel :mouse-wheel}]\n    (when-let [handler (opts quil-name)]\n      (aset prc (name processing-name)\n            (fn [& args]\n              (quil.sketch/with-sketch prc\n                (apply handler args)))))))\n\n(defn in-fullscreen? []\n  (or (.-fullscreenElement js/document)\n      (.-mozFullScreenElement js/document)))\n\n(defn add-fullscreen-support\n  \"Adds fullscreen support for the provided `p5` object.\n  Fullscreen is enabled when the user presses `F11`. We turn\n  the sketch `<canvas>` element to fullscreen storing the old size\n  in an `atom`. When the user cancels fullscreen (`F11` or `Esc`)\n  we resize the sketch back to the old size.\"\n  [applet]\n  (let [old-size (atom nil)\n        adjust-canvas-size\n        (fn []\n          (if (in-fullscreen?)\n            (do\n              (reset! old-size\n                      [(.-width applet) (.-height applet)])\n              (set-size applet\n                        (-> js/window .-screen .-width)\n                        (-> js/window .-screen .-height)))\n            (apply set-size applet @old-size)))]\n    (events/listen js/window EventType/KEYDOWN\n                   (fn [event]\n                     (when (and (= (.-key event) \"F11\")\n                                (not (in-fullscreen?)))\n                       (.preventDefault event)\n                       (let [canvas (.-quil-canvas applet)]\n                         (cond (.-requestFullscreen canvas) (.requestFullscreen canvas)\n                               (.-mozRequestFullScreen canvas) (.mozRequestFullScreen canvas)\n                               :else (.warn js/console \"Fullscreen mode is not supported in current browser.\"))))))\n    (events/listen js/document \"fullscreenchange\" adjust-canvas-size)\n    (events/listen js/document \"mozfullscreenchange\" adjust-canvas-size)\n    (events/listen js/document \"fullscreenerror\"\n                   #(.error js/console \"Error while switching to/from fullscreen: \" %))))\n\n(defn make-sketch [options]\n  (let [opts            (->> (:middleware options [])\n                             (cons do/deprecated-options)\n                             (apply comp)\n                             (#(% options))\n                             (merge {:size [500 300]}))\n\n        sketch-size     (:size opts)\n        renderer        (:renderer opts)\n        features        (set (:features opts))\n\n        setup (fn []\n                (->> (if renderer [renderer] [])\n                     (concat sketch-size)\n                     (apply size))\n                (when (:settings opts) ((:settings opts)))\n                (when (:setup opts) ((:setup opts))))\n        mouse-wheel (when-let [wheel-handler (:mouse-wheel opts)]\n                      ; using (get \"delta\") because in advanced mode\n                      ; it will be renamed otherwise.\n                      (fn [evt] (wheel-handler (object/get evt \"delta\"))))\n\n        opts (assoc opts\n                    :setup setup\n                    :mouse-wheel mouse-wheel)\n\n        sketch (fn [prc]\n                 (bind-handlers prc opts)\n                 (set! (.-quil prc) (atom nil))\n                 (set! (.-quil-internal-state prc) (atom u/initial-internal-state)))]\n    sketch))\n\n(defn destroy-previous-sketch [host-elem]\n  (when-let [proc-obj (.-processing-obj host-elem)]\n    (.remove proc-obj)))\n\n(defn sketch [& opts]\n  (let [opts-map (apply hash-map opts)\n        host-elem (:host opts-map)\n        renderer (or (:renderer opts-map) :p2d)\n        host-elem (if (string? host-elem)\n                    (.getElementById js/document host-elem)\n                    host-elem)]\n    (if host-elem\n      (do\n        (if (.-processing-context host-elem)\n          (when-not (= renderer (.-processing-context host-elem))\n            (.warn js/console \"WARNING: Using different context on one canvas!\"))\n          (set! (.-processing-context host-elem) renderer))\n        (destroy-previous-sketch host-elem)\n        (let [proc-obj (js/p5. (make-sketch opts-map) host-elem)]\n          (set! (.-processing-obj host-elem) proc-obj)\n          (set! (.-quil-canvas proc-obj) host-elem)\n          (add-fullscreen-support proc-obj)\n          proc-obj))\n      (.error js/console\n              (if (:host opts-map)\n                (str \"ERROR: Cannot find host element: \" (:host opts-map))\n                \"ERROR: Cannot create sketch. :host is not specified or element not found.\")))))\n\n(def sketch-init-list (atom (list)))\n\n(defn empty-body? []\n  (let [child (.-childNodes (.-body js/document))]\n    ; seems hacky, we should come up with better way of\n    ; checking whether body is empty or not\n    (<= (.-length child) 1)))\n\n(defn add-canvas [canvas-id]\n  (let [canvas (.createElement js/document \"canvas\")]\n    (.setAttribute canvas \"id\" canvas-id)\n    (.appendChild (.-body js/document) canvas)))\n\n(defn init-sketches []\n  (let [add-elem? (empty-body?)]\n    (doseq [sk @sketch-init-list]\n      (when add-elem?\n        (add-canvas (:host-id sk)))\n      ((:fn sk))))\n  (reset! sketch-init-list []))\n\n(defn add-sketch-to-init-list [sk]\n  (swap! sketch-init-list conj sk)\n  ; if page already loaded immediately init sketch we just added\n  (when (= (.-readyState js/document) \"complete\")\n    (init-sketches)))\n\n(events/listenOnce js/window EventType/LOAD init-sketches)\n"]}