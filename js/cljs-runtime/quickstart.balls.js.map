{"version":3,"sources":["quickstart/balls.cljs"],"mappings":";AAIA,yBAAA,zBAAMA;AAAN,AAEE,AAACC,qBAAa,CAAA,OAAM,mBAAA,nBAACC;;AAErB,mDAAA,nDAACC;;AAJH,kDAAA,uDAAA,IAAA,uDAAA;;AAUA,gCAAA,hCAAMC,wEAAcC;AAApB,AAAA,kDAAA,8NAAA,vKAEU,gKAAA,hKAACC,cAAI,CAAG,AAAA,qFAAQD,SAAO,6CAAA,7CAACE,iHACxB,CAAG,AAAA,qFAAQF,SAAO,6CAAA,7CAACE;;AAE7B,8BAAA,9BAAMC,oEAAYH;AAAlB,AAEE,mDAAA,nDAACI;;AAED,yIAAA,MAAA,/IAACC,6CACO,AAAA,qFAAQL;;AAGhB,IAAMM,QAAM,AAAA,qFAAQN;IACdO,IAAE,CAAA,OAAM,AAACC,cAAMF;IACfG,IAAE,CAAA,OAAM,AAACC,cAAMJ;AAFrB,AAIE,IAAAK,oBAAA,mFAAqB,qBAAA,pBAAG,AAACI,yBACJ,sBAAA,rBAAG,AAACC;AADzB,AAAA,AAAAJ;;AAAA,IAAA,AAAA,AAAAC,kDAAAF;;AAGE,OAACM,kBAAUV,EAAEE,EAGF,CAAG,CAAA,OAAQ,AAACO,sBAAW,qCAAA,pCAAG,CAAA,OAAM,mBAAA,nBAACnB,oCACjC,CAAG,CAAA,OAAQ,AAACmB,sBAAW,qCAAA,pCAAG,CAAA,OAAM,mBAAA,nBAACnB;UAP9C,AAAA,AAAAiB;;AAaJ,8BAAA,9BAAeI,oEAAYC,KAAKC,SAASC;AAAzC,AACE,+GAAA,2DAAA,qDAAA,+HAAA,8EAAA,uFAAA,iFAAA,iEAAA,9oBAACC,8JACOH,6IACC,aAAA,ZAAGE,iBACH,aAAA,ZAAGA,gFAGH1B,gFAECI,mFACFI,gLAIOoB","names":["quickstart.balls/setup","quil.core/frame-rate","cljs.core/rand-int","quil.core.color_mode","quickstart.balls/update-state","state","cljs.core/mod","cljs.core.rand","quickstart.balls/draw-state","quil.core.background","quil.core.fill","angle","x","quil.core/cos","y","quil.core/sin","tr__17106__auto__","quil.core/push-matrix","quil.core.translate","quil.core/pop-matrix","quil.core/width","quil.core/height","quil.core/ellipse","quickstart.balls/run-sketch","host","sc_width","sc_height","quil.core.sketch","quil.middleware/fun-mode"],"sourcesContent":["(ns quickstart.balls\r\n  (:require [quil.core :as q :include-macros true]\r\n            [quil.middleware :as m]))\r\n\r\n(defn setup []\r\n  ; Set frame rate to 30 frames per second.\r\n  (q/frame-rate (+ 10 (rand-int 100)))\r\n  ; Set color mode to HSB (HSV) instead of default RGB.\r\n  (q/color-mode :hsb)\r\n  ; setup function returns initial state. It contains\r\n  ; circle color and position.\r\n  {:color 0\r\n   :angle 0})\r\n\r\n(defn update-state [state]\r\n  ; Update sketch state by changing circle color and position.\r\n  {:color (mod (+ (:color state) (rand 2)) 255)\r\n   :angle (+ (:angle state) (rand 0.5))})\r\n\r\n(defn draw-state [state]\r\n  ; Clear the sketch by filling it with light-grey color.\r\n  (q/background 0)\r\n  ; Set circle color.\r\n  (q/fill ;(:color (if (> (+ 100 state) 255) 255 (+ 100 state)))\r\n          (:color state) 255 255\r\n          )\r\n  ; Calculate x and y coordinates of the circle.\r\n  (let [angle (:angle state)\r\n        x (* 20 (q/cos angle))\r\n        y (* 20 (q/sin angle))]\r\n    ; Move origin point to the center of the sketch.\r\n    (q/with-translation [(/ (q/width) 2)\r\n                         (/ (q/height) 2)]\r\n      ; Draw the circle.\r\n      (q/ellipse x y\r\n                 ;(* (q/width) (/ 100.0 (+ 1 (rand-int 100))))\r\n                 ;(* (q/height) (/ 100.0 (+ 1 (rand-int 100))))\r\n                 (* (* 0.64 (q/height)) (/ (+ 30 (rand-int 61)) 100.0))\r\n                 (* (* 0.64 (q/height)) (/ (+ 30 (rand-int 61)) 100.0))\r\n                 ;(+ 30 (rand-int 71))\r\n                 ;(+ 30 (rand-int 71))\r\n                 ))))\r\n\r\n; this function is called in home view\r\n(defn ^:export run-sketch [host sc_width sc_height]\r\n  (q/sketch\r\n    :host host\r\n    :size [(* sc_height 0.1)\r\n           (* sc_height 0.1)]\r\n    ;; :size [250 250]\r\n    ; setup function called only once, during sketch initialization.\r\n    :setup setup\r\n    ; update-state is called on each iteration before draw-state.\r\n    :update update-state\r\n    :draw draw-state\r\n    ; This sketch uses functional-mode middleware.\r\n    ; Check quil wiki for more info about middlewares and particularly\r\n    ; fun-mode.\r\n    :middleware [m/fun-mode]\r\n    ))\r\n\r\n; uncomment this line to reset the sketch:\r\n; (run-sketch)\r\n"]}