{"version":3,"sources":["quil/util.cljc"],"mappings":";AAIA;;;kBAAA,lBAAMA;AAAN,AAAA;;AAIA;;;mCAAA,2CAAA,iEAAA,KAAA,2DAAA,/MAAKC;AAuBL;;;;iCAAA,jCAAMC,0EAGHC,IAAIC;AAHP,AAIE,oBACE,AAACC,4CAAID,SAASD;AAAgB,OAACE,4CAAID,SAASD;;AAD9C,oBAEE,eAAA,fAACG,8DAAOH,MAAK,AAACI,eAAKH;AAAWD;;AAFhC,AAIgC,MAAO,KAAAK,MAEC,CAAA,8EAAA,LAAkCL,uEAA0B,AAACM,cAAI,AAACC,6CAAK,AAACC,eAAKP;;;;;AAEvH;;;;;;;;;;kCAAA,lCAAOQ,4EASJC;AATH,AAUE,IAAAC,mBAAI,AAACC,eAAK,AAACL,6CAAK,4CAAA,WAAAM,vDAACC;AAAD,AAAM,OAAAD;GAAY,AAACL,eAAKE;AAAxC,AAAA,oBAAAC;AAAAA;;AAAA;;;AAGF,AAAA;;;;;;;;;;;;;;wBAAA,gCAAAI,xDAAOE;AAAP,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,oDAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,oDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,oDAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAZ,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,sDAAA,tDAAOY,iEAaHC;AAbJ,AAaS,2DAAA,OAAA,3DAACC,uDAAeD;;;AAbzB,CAAA,sDAAA,tDAAOD,iEAcHC,IAAIE;AAdR,AAca,2DAAA,pDAACD,uDAAeD,IAAIE;;;AAdjC,CAAA,sDAAA,tDAAOH,iEAeHI,EAAEH,IAAIE;AAfV,AAgBG,GAAI,OAAA,NAAGF;AACL,OAACC,oDAAY,6CAAKE,+CAAED,eAAK,OAAA,NAAKF,WAAKE;;AACnCC;;;;AAlBL,CAAA,gDAAA,hDAAOJ;;AAAP,AAoBA,kCAAA,lCAAMK,4EACHC;AADH,AAEE,IAAMC,cAAY,AAACf,gCAAsBc;AAAzC,AACE,OAACE,8CACA,AAACX,4CAAI,WAAAY;AAAA,AAAA,IAAAC,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAAME;QAAN,AAAAD,4CAAAD,WAAA,IAAA,/DAAQG;AAAR,AACE,IAAMZ,MAAI,AAASW;IACbE,OAAK,CAAGP,cAAYN;IACpBE,MAAI,AAACD,oDAAYY;AAFvB,AAGE,sHAAA,/GAACC,yGAAQH,EAAET,SAASU;GACxBP;;AAEV,mCAAA,nCAAMU;AAAN,AAAA;;AASA,8BAAA,9BAAMC,oEAAmBC;AAAzB,AACE,uFAAA,IAAA,pFAACC,uBACA,AAACC,0BAAgB,AAACC,eAAKH;;AAG1B,uCAAA,vCAAMI,sFAA4BC;AAAlC,AACE,oDAAA,7CAACC,gFACK,4CAAA,WAAAC,vDAAC5B;AAAD,AACE,YAAA6B,2BAAA,KAAA,EAAA,IAAA,AAAAA,sCAAA,CAAAD,yIAAA,xHAAU,AAACE,+CAAO,CAAA,cAAmB,4BAAAF,5BAACR;GACvCM;;AAET,wCAAA,xCAAMK,wFAA6BL;AAAnC,AACE,oDAAA,7CAACC,gFACK,4CAAA,WAAAK,vDAAChC;AAAD,AACE,YAAA6B,2BAAA,KAAA,EAAA,IAAA,AAAAA,sCAAA,CAAAG,iBAAA,AAAAC,iDAAA,AAAAC,cAAA,AAAAC,sDAAA,KAAAC,eAAA,KAAA,AAAA,uEAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,KAAA,AAAA,6EAAA,KAAA,IAAA,yDAAA,KAAAA,eAAA,mDAAA,KAAA,IAAA,gBAAA,vEAAkC,4BAAAJ,5BAACZ;GACpCM;;AAET,mCAAA,nCAAMW,8EAAwBC,OAAOC,eAAeC;AAApD,AAAA,OAAAP,iDAAA,AAAAC,cAAA,AAAAC,sDAAA,KAAAC,eAAA,KAAA,AAAA,sDAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,oBAAA,KAAA,IAAA,yDAAA,KAAAA,eAAA,kNAAA,KAAA,IAAA,hUAEMG,0GACA,EAAI,oDAAA,pDAACE,6CAAEH,4DACL,AAACb,qCAA2Be,WAC5B,AAACT,sCAA4BS;;AAQrC;;;;8BAAA,9BAAME,oEAGH1B;AAHH,AAIkCA","names":["quil.util/no-fn","quil.util/initial-internal-state","quil.util/resolve-constant-key","key","mappings","cljs.core.get","cljs.core/some","cljs.core/vals","js/Error","cljs.core/vec","cljs.core.sort","cljs.core/keys","quil.util/length-of-longest-key","m","or__5045__auto__","cljs.core/last","p1__16423#","cljs.core.map","var_args","G__16431","quil.util/gen-padding","len","quil.util.gen_padding","pad","s","quil.util/print-definition-list","definitions","longest-key","cljs.core.dorun","p__16438","vec__16439","cljs.core.nth","k","v","diff","cljs.core.println","quil.util/clj-compilation?","quil.util/prepare-quil-name","const-keyword","clojure.string/replace","clojure.string/upper-case","cljs.core/name","quil.util/prepare-quil-clj-constants","constants","cljs.core.into","p1__16443#","cljs.core/PersistentVector","cljs.core.symbol","quil.util/prepare-quil-cljs-constants","p1__16444#","cljs.core.sequence","cljs.core/seq","cljs.core.concat","cljs.core/List","quil.util/make-quil-constant-map","target","const-map-name","const-map","cljs.core._EQ_","quil.util/clj-unchecked-int"],"sourcesContent":["(ns ^{:doc \"Utility fns\"}\n quil.util\n  (:require [clojure.string :as cstr]))\n\n(defn no-fn\n  \"Function that does nothing.\"\n  [])\n\n(def initial-internal-state\n  \"Internal state map used to initiate all sketches.\"\n  {:frame-rate 60\n   :looping? true})\n\n#?(:clj\n   (defn callable? [value]\n     (or (fn? value)\n         (var? value))))\n\n#?(:clj\n   (defn absolute-path [path]\n     (-> (str path)\n         (java.io.File.)\n         (.getAbsolutePath))))\n\n#?(:clj\n   (defn int-like?\n     [val]\n     (let [t (type val)]\n       (or (= java.lang.Long t)\n           (= java.lang.Integer t)))))\n\n(defn resolve-constant-key\n  \"Returns the val associated with `key` in `mappings` or `key` directly if it\n  is one of the vals in `mappings`. Otherwise throws an exception.\"\n  [key mappings]\n  (cond\n    (get mappings key)            (get mappings key)\n    (some #{key} (vals mappings)) key\n\n    :else                         (throw (#?(:clj Exception.\n                                             :cljs js/Error.)\n                                          (str \"Expecting a keyword, got: \" key \". Expected one of: \" (vec (sort (keys mappings))))))))\n\n(defn- length-of-longest-key\n  \"Returns the length of the longest key of map `m`. Assumes `m`'s keys are strings\n   and returns 0 if map is empty:\n\n   Examples:\n   ```\n   (length-of-longest-key {\\\"foo\\\" 1 \\\"barr\\\" 2 \\\"bazzz\\\" 3}) ;=> 5\n   (length-of-longest-key {}) ;=> 0\n   ```\"\n  [m]\n  (or (last (sort (map #(.length %) (keys m))))\n      0))\n\n(defn- gen-padding\n  \"Generates a padding string with `s` concatenated with `len` times `pad`.\n   May be called without starting string `s` in which case it defaults to the\n   empty string and also without `pad` in which case it defaults to a single\n   space.\n\n   Examples:\n   ```\n   (gen-padding \\\"asdf\\\" 5 \\\"b\\\") ;=> \\\"asdfbbbbb\\\"\n   (gen-padding 3 \\\"b\\\")          ;=> \\\"bbb\\\"\n   (gen-padding 3)                ;=> \\\"   \\\"\n   ```\n   \"\n  ([len] (gen-padding \"\" len \" \"))\n  ([len pad] (gen-padding \"\" len pad))\n  ([s len pad]\n   (if (> len 0)\n     (gen-padding (str s pad) (dec len) pad)\n     s)))\n\n(defn print-definition-list\n  [definitions]\n  (let [longest-key (length-of-longest-key definitions)]\n    (dorun\n     (map (fn [[k v]]\n            (let [len (.length k)\n                  diff (- longest-key len)\n                  pad (gen-padding diff)]\n              (println k pad \"- \" v)))\n          definitions))))\n\n(defn clj-compilation? []\n  #?(:clj\n     (not\n      (boolean\n       (when-let [n (find-ns 'cljs.analyzer)]\n         (when-let [v (ns-resolve n '*cljs-file*)]\n           @v))))\n     :cljs false))\n\n(defn prepare-quil-name [const-keyword]\n  (cstr/replace\n   (cstr/upper-case (name const-keyword))\n   #\"-\" \"_\"))\n\n(defn prepare-quil-clj-constants [constants]\n  (into {}\n        (map\n         #(vector % (symbol (str \"PConstants/\" (prepare-quil-name %))))\n         constants)))\n\n(defn prepare-quil-cljs-constants [constants]\n  (into {}\n        (map\n         #(vector % `(aget js/p5.prototype ~(prepare-quil-name %)))\n         constants)))\n\n(defn make-quil-constant-map [target const-map-name const-map]\n  `(def ^{:private true}\n     ~const-map-name\n     ~(if (= target :clj)\n        (prepare-quil-clj-constants const-map)\n        (prepare-quil-cljs-constants const-map))))\n\n(defmacro generate-quil-constants [target & opts]\n  `(do\n     ~@(map\n        #(make-quil-constant-map target (first %) (second %))\n        (partition 2 opts))))\n\n(defn clj-unchecked-int\n  \"In clojure it does `unchecked-int` and does nothing in cljs.\n  Needed to handle colors in hex form in clojure.\"\n  [v]\n  #?(:clj (unchecked-int v) :cljs v))\n"]}