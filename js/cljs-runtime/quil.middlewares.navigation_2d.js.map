{"version":3,"sources":["quil/middlewares/navigation_2d.cljc"],"mappings":"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","names":["quil.middlewares.navigation-2d/missing-navigation-key-error","quil.middlewares.navigation-2d/assert-state-has-navigation","state","js/Error","quil.middlewares.navigation-2d/default-position","quil.core/width","quil.core/height","quil.middlewares.navigation-2d/setup-2d-nav","user-setup","user-settings","initial-state","cljs.core/select-keys","cljs.core.merge","p1__17381#","cljs.core.update_in","quil.middlewares.navigation-2d/mouse-dragged","event","dx","dy","zoom","cljs.core/+","quil.middlewares.navigation-2d/mouse-wheel","cljs.core/*","quil.middlewares.navigation-2d/draw","user-draw","quil.core/push-matrix","nav-2d","pos","quil.core.scale","tr__17287__auto__","quil.core.translate","quil.core/pop-matrix","cljs.core/first","cljs.core/second","quil.middlewares.navigation-2d/navigation-2d","options","user-mouse-dragged","_","user-mouse-wheel","setup","cljs.core.assoc","cljs.core.partial","G__17382","G__17383","G__17384","G__17385"],"sourcesContent":["(ns quil.middlewares.navigation-2d\n  (:require [quil.core :as q :include-macros true]))\n\n(def ^:private ^String missing-navigation-key-error\n  (str \"state map is missing :navigation-2d key. \"\n       \"Did you accidentally removed it from the state in \"\n       \":update or any other handler?\"))\n\n(defn- assert-state-has-navigation\n  \"Asserts that `state` map contains `:navigation-2d` object.\"\n  [state]\n  (when-not (:navigation-2d state)\n    (throw #?(:clj (RuntimeException. missing-navigation-key-error)\n              :cljs (js/Error. missing-navigation-key-error)))))\n\n(defn- default-position\n  \"Default position configuration: zoom is neutral and central point is\n  `width/2, height/2`.\"\n  []\n  {:position [(/ (q/width) 2.0)\n              (/ (q/height) 2.0)]\n   :zoom 1})\n\n(defn- setup-2d-nav\n  \"Custom 'setup' function which creates initial position\n  configuration and puts it to the state map.\"\n  [user-setup user-settings]\n  (let [initial-state (-> user-settings\n                          (select-keys [:position :zoom])\n                          (->> (merge (default-position))))]\n    (update-in (user-setup) [:navigation-2d]\n               #(merge initial-state %))))\n\n(defn- mouse-dragged\n  \"Changes center of the sketch depending on the last mouse move. Takes\n  zoom into account as well.\"\n  [state event]\n  (assert-state-has-navigation state)\n  (let [dx (- (:p-x event) (:x event))\n        dy (- (:p-y event) (:y event))\n        zoom (-> state :navigation-2d :zoom)]\n    (-> state\n        (update-in [:navigation-2d :position 0] + (/ dx zoom))\n        (update-in [:navigation-2d :position 1] + (/ dy zoom)))))\n\n(defn- mouse-wheel\n  \"Changes zoom settings based on scroll.\"\n  [state event]\n  (assert-state-has-navigation state)\n  (update-in state [:navigation-2d :zoom] * (+ 1 (* -0.1 event))))\n\n(defn- draw\n  \"Calls user draw function with all necessary transformations (position\n  and zoom) applied.\"\n  [user-draw state]\n  (assert-state-has-navigation state)\n  (q/push-matrix)\n  (let [nav-2d (:navigation-2d state)\n        zoom (:zoom nav-2d)\n        pos (:position nav-2d)]\n    (q/scale zoom)\n    (q/with-translation [(- (/ (q/width) 2 zoom) (first pos))\n                         (- (/ (q/height) 2 zoom) (second pos))]\n      (user-draw state)))\n  (q/pop-matrix))\n\n(defn navigation-2d\n  \"Enables navigation over 2D sketch. Dragging mouse will move center of the\n  sketch and mouse wheel controls zoom.\"\n  [options]\n  (let [; 2d-navigation related user settings\n        user-settings (:navigation-2d options)\n\n        ; user-provided handlers which will be overridden\n        ; by 3d-navigation\n        user-draw (:draw options (fn [state]))\n        user-mouse-dragged (:mouse-dragged options (fn [state _] state))\n        user-mouse-wheel (:mouse-wheel options (fn [state _] state))\n        setup (:setup options (fn [] {}))]\n    (assoc options\n\n           :setup (partial setup-2d-nav setup user-settings)\n\n           :draw (partial draw user-draw)\n\n           :mouse-dragged (fn [state event]\n                            (user-mouse-dragged (mouse-dragged state event) event))\n           :mouse-wheel (fn [state event]\n                          (user-mouse-wheel (mouse-wheel state event) event)))))\n"]}