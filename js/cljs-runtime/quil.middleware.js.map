{"version":3,"sources":["quil/middleware.cljc"],"mappings":";AAOA;;;;;;;2BAAA,3BAKEA,8DAMCC;AAXH,AAYE,OAACC,mCAAkBD;;AAgBrB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gCAAA,hCAKEE,wEA+DCF;AApEH,AAqEE,OAACG,6CAA4BH;;AAE/B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gCAAA,hCAKEI,wEA8BCJ;AAnCH,AAoCE,OAACK,6CAA4BL","names":["quil.middleware/fun-mode","options","quil.middlewares.fun-mode/fun-mode","quil.middleware/navigation-3d","quil.middlewares.navigation-3d/navigation-3d","quil.middleware/navigation-2d","quil.middlewares.navigation-2d/navigation-2d"],"sourcesContent":["(ns ^{:doc \"Quil middleware.\"}\n quil.middleware\n  (:require [quil.middlewares.fun-mode :as fun-mode]\n            #?(:clj [quil.middlewares.pause-on-error :as pause-on-error])\n            [quil.middlewares.navigation-3d :as navigation-3d]\n            [quil.middlewares.navigation-2d :as navigation-2d]))\n\n(defn ^{:requires-bindings false\n        :category \"Middleware\"\n        :subcategory nil\n        :ns \"quil.middleware\"\n        :added \"2.1.0\"}\n  fun-mode\n  \"Introduces `function mode`. Adds `update` function which takes current state\n  and returns new state. Makes all other functions (`setup`, `draw`,\n  `mouse-click`, etc) state-aware.\n  See [wiki](https://github.com/quil/quil/wiki/Functional-mode-%28fun-mode%29)\n  for more details.\"\n  [options]\n  (fun-mode/fun-mode options))\n\n#?(:clj\n   (defn ^{:requires-bindings false\n           :category \"Middleware\"\n           :subcategory nil\n           :ns \"quil.middleware\"\n           :added \"2.2.0\"}\n     pause-on-error\n     \"Pauses sketch if any of the user-provided handlers throws an error.\n  It allows to fix the error on the fly and continue sketch.\n  May be good alternative to default '500ms pause if exception'\n  behaviour.\"\n     [options]\n     (pause-on-error/pause-on-error options)))\n\n(defn ^{:requires-bindings false\n        :category \"Middleware\"\n        :subcategory nil\n        :ns \"quil.middleware\"\n        :added \"2.2.0\"}\n  navigation-3d\n  \"Enables navigation in 3D space. Similar to how it is done in\n  shooters: WASD navigation, space is go up, drag mouse to look around.\n  This middleware requires [[fun-mode]].\n\n  Navigation\n\n  * Drag mouse to look around. You can change settings to bind\n    mouse-moved instead of mouse-dragged to look around. See\n    customization info below.\n\n  * Keyboard:\n    * `w` - go forward\n    * `s` - go backward\n    * `a` - strafe left\n    * `d` - strafe right\n    * `space` - go up\n    * `z` - go down, can't bind to `ctrl`, limitation of Processing\n\n  Customization\n\n  You can customize this middleware by providing a map as\n  `:navigation-3d` option in [[quil.sketch/defsketch]]/[[quil.sketch/sketch]].\n  The map can have the following optional keys:\n\n  * `:position` - vector of 3 numbers, initial camera position. Default\n                  is the same as in [[quil.core/camera]] function.\n\n  * `:straight` - vector of 3 numbers, direction you'll be looking at.\n                  Default is `[0 0 -1]` (looking down).\n\n  * `:up` - vector of 3 numbers, 'up' direction. Default is `[0 1 0]`.\n\n  * `:pixels-in-360` - number, mouse sensitivity. Defines how many pixels\n                       you need to move/drag your mouse to rotate 360 degrees.\n                       The less the number the more sensitive the mouse.\n                       Default is `1000`.\n\n  * `:step-size` - number, number of pixels you move on each key event (wasd).\n                   Default is `20`.\n\n  * `:rotate-on` - keyword, either `:mouse-dragged` or `:mouse-moved`. Specifies\n                   on which mouse event camera should rotate. Default is\n                   `:mouse-dragged`.\n\n  Accessing position information from a sketch\n\n  [[navigation-3d]] uses [[fun-mode]] under the hood so all position-related\n  information is stored in the state map. It means that you can access in\n  draw/update/any handler and modify it if you need to. Position\n  information is a map which is stored under `:navigation-3d` key in the\n  state map. Position consists of 3 values: `:position`, `:straight` and `:up`.\n  See \\\"Customization\\\" section above for more details.\n\n  Example:\n  ```\n  (q/defsketch my-sketch\n    ...\n    :middleware [m/fun-mode m/navigation-3d])\n  ```\n\n  See wiki article for more(?) details:\n  https://github.com/quil/quil/wiki/Navigation-3D\"\n  [options]\n  (navigation-3d/navigation-3d options))\n\n(defn ^{:requires-bindings false\n        :category \"Middleware\"\n        :subcategory nil\n        :ns \"quil.middleware\"\n        :added \"2.2.6\"}\n  navigation-2d\n  \"Enables navigation over 2D sketch. Drag mouse to change the center of the\n  sketch and mouse wheel controls zoom. This middleware requires [[fun-mode]].\n\n  Customization\n\n  You can customize this middleware by providing a map as\n  `:navigation-2d` option in [[quil.sketch/defsketch]]/[[quil.sketch/sketch]].\n  The map can have the following optional keys:\n\n  * `:position` - vector of 2 numbers, x and y - center of the screen.\n                  Default is `width/2`, `height/2`.\n\n  * `:zoom` - number indicating current zoom level. Default is `1`.\n\n  Accessing position information from a sketch\n\n  [[navigation-2d]] uses [[fun-mode]] under the hood so all position-related\n  information is stored in the state map. It means that you can access in\n  draw/update/any handler and modify it if you need to. Position\n  information is a map which is stored under `:navigation-2d` key in the\n  state map. Position consists of 2 values: `:position` and `:zoom`.\n  See \\\"Customization\\\" section above for more details.\n\n  Example:\n  ```\n  (q/defsketch my-sketch\n    ...\n    :middleware [m/fun-mode m/navigation-2d])\n  ```\"\n  [options]\n  (navigation-2d/navigation-2d options))\n"]}