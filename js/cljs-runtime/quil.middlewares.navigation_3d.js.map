{"version":3,"sources":["quil/middlewares/navigation_3d.cljc"],"mappings":"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","names":["quil.middlewares.navigation-3d/missing-navigation-key-error","quil.middlewares.navigation-3d/assert-state-has-navigation","state","js/Error","quil.middlewares.navigation-3d/default-position","quil.core/width","quil.core/height","quil.core/tan","quil.core/PI","quil.middlewares.navigation-3d/rotate-by-axis-and-angle","v","axis","angle","vec__16763","cljs.core.nth","vec__16766","a-x","a-y","a-z","x","y","z","cs","quil.core/cos","-cs","sn","quil.core/sin","a","b","c","d","e","f","g","h","i","quil.middlewares.navigation-3d/rotate-lr","nav-3d","cljs.core.update_in","p__16775","p__16776","vec__16779","vec__16782","quil.middlewares.navigation-3d/cross-product","u1","u2","u3","v1","v2","v3","quil.middlewares.navigation-3d/v-mult","mult","p1__16786#","cljs.core.mapv","quil.middlewares.navigation-3d/v-plus","cljs.core/+","quil.middlewares.navigation-3d/v-opposite","quil.middlewares.navigation-3d/v-normalize","norm","cljs.core.map","quil.core/sq","cljs.core.apply","quil.core/sqrt","quil.middlewares.navigation-3d/rotate-ud","p1__16789#","rotate","quil.middlewares.navigation-3d/rotate","event","pixels-in-360","cljs.core._EQ_","dx","dy","angle-lr","quil.core/map-range","quil.core/TWO-PI","angle-ud","p1__16791#","quil.middlewares.navigation-3d/space","cljs.core.keyword","quil.middlewares.navigation-3d/move","step-size","map__16802","cljs.core/--destructure-map","cljs.core.get","up","straight","temp__5802__auto__","dir","pred__16805","expr__16806","cljs.core/=","p1__16799#","quil.middlewares.navigation-3d/setup-3d-nav","user-setup","user-settings","initial-state","cljs.core/select-keys","cljs.core.merge","p1__16810#","quil.middlewares.navigation-3d/navigation-3d","options","rotate-on","draw","key-pressed","_","rotate-on-fn","G__16821","G__16822","setup","cljs.core.assoc","cljs.core.partial","map__16827","vec__16828","vec__16831","vec__16834","c-x","c-y","c-z","u-x","u-y","u-z","p-x","p-y","p-z","quil.core.camera","G__16840","G__16841","G__16843","G__16844"],"sourcesContent":["(ns quil.middlewares.navigation-3d\n  (:require [quil.core :as q]))\n\n(def ^:private ^String missing-navigation-key-error\n  (str \"state map is missing :navigation-3d key. \"\n       \"Did you accidentally removed it from the state in \"\n       \":update or any other handler?\"))\n\n(defn- assert-state-has-navigation\n  \"Asserts that `state` map contains `:navigation-2d` object.\"\n  [state]\n  (when-not (:navigation-3d state)\n    (throw #?(:clj (RuntimeException. missing-navigation-key-error)\n              :cljs (js/Error. missing-navigation-key-error)))))\n\n(defn- default-position\n  \"Default position configuration. Check default configuration in\n  'camera' function.\"\n  []\n  {:position [(/ (q/width) 2.0)\n              (/ (q/height) 2.0)\n              (/ (q/height) 2.0 (q/tan (/ (* q/PI 60.0) 360.0)))]\n   :straight [0 0 -1]\n   :up [0 1 0]})\n\n(defn- rotate-by-axis-and-angle\n  \"Rotates vector `v` by `angle` with `axis`.\n  Formula is taken from wiki:\n  http://en.wikipedia.org/wiki/Rotation_matrix#Rotation_matrix_from_axis_and_angle\"\n  [v axis angle]\n  (let [[a-x a-y a-z] axis\n        [x y z] v\n        cs (q/cos angle)\n        -cs (- 1 cs)\n        sn (q/sin angle)\n        ; Matrix is\n        ; [a b c]\n        ; [d e f]\n        ; [g h i]\n        a (+ cs (* a-x a-x -cs))\n        b (- (* a-x a-y -cs)\n             (* a-z sn))\n        c (+ (* a-x a-z -cs)\n             (* a-y sn))\n        d (+ (* a-x a-y -cs)\n             (* a-z sn))\n        e (+ cs (* a-y a-y -cs))\n        f (- (* a-y a-z -cs)\n             (* a-x sn))\n        g (- (* a-x a-z -cs)\n             (* a-y sn))\n        h (+ (* a-y a-z -cs)\n             (* a-x sn))\n        i (+ cs (* a-z a-z -cs))]\n    [(+ (* a x) (* b y) (* c z))\n     (+ (* d x) (* e y) (* f z))\n     (+ (* g x) (* h y) (* i z))]))\n\n(defn- rotate-lr\n  \"Rotates `nav-3d` configuration left-right. `angle` positive - rotate right,\n  negative - left.\"\n  [nav-3d angle]\n  (update-in nav-3d [:straight] rotate-by-axis-and-angle (:up nav-3d) angle))\n\n(defn- cross-product\n  \"Vector cross-product: http://en.wikipedia.org/wiki/Cross_product\"\n  [[u1 u2 u3] [v1 v2 v3]]\n  [(- (* u2 v3) (* u3 v2))\n   (- (* u3 v1) (* u1 v3))\n   (- (* u1 v2) (* u2 v1))])\n\n(defn- v-mult\n  \"Multiply vector `v` by scalar `mult`.\"\n  [v mult]\n  (mapv #(* % mult) v))\n\n(defn- v-plus\n  \"Sum of 2 vectors.\"\n  [v1 v2]\n  (mapv + v1 v2))\n\n(defn- v-opposite\n  \"Returns vector opposite to vector `v`.\"\n  [v]\n  (v-mult v -1))\n\n(defn- v-normalize\n  \"Normalize vector, returning vector\n  which has same direction but with norm equals to 1.\"\n  [v]\n  (let [norm (->> (map q/sq v)\n                  (apply +)\n                  (q/sqrt))]\n    (v-mult v (/ norm))))\n\n(defn- rotate-ud\n  \"Rotates `nav-3d` configuration up-down.\"\n  [nav-3d angle]\n  (let [axis (cross-product (:straight nav-3d) (:up nav-3d))\n        rotate #(rotate-by-axis-and-angle % axis angle)]\n    (-> nav-3d\n        (update-in [:straight] rotate)\n        (update-in [:up] rotate))))\n\n(defn- rotate\n  \"Mouse handler function which rotates nav-3d configuration.\n  It uses mouse from `event` object and `pixels-in-360` to calculate\n  angles to rotate.\"\n  [state event pixels-in-360]\n  (assert-state-has-navigation state)\n  (if (= 0 (:p-x event) (:p-y event))\n    state\n    (let [dx (- (:p-x event) (:x event))\n          dy (- (:y event) (:p-y event))\n          angle-lr (q/map-range dx 0 pixels-in-360 0 q/TWO-PI)\n          angle-ud (q/map-range dy 0 pixels-in-360 0 q/TWO-PI)]\n      (update-in state [:navigation-3d]\n                 #(-> %\n                      (rotate-lr angle-lr)\n                      (rotate-ud angle-ud))))))\n\n(def ^:private space (keyword \" \"))\n\n(defn- move\n  \"Keyboard handler function which moves nav-3d configuration.\n  It uses keyboard key from `event` object to determine in which\n  direction to move.\"\n  [state event step-size]\n  (assert-state-has-navigation state)\n  (let [{:keys [up straight]} (:navigation-3d state)]\n    (if-let [dir (condp = (:key event)\n                   :w straight\n                   :s (v-opposite straight)\n                   space (v-opposite up)\n                   :z up\n                   :d (cross-product straight up)\n                   :a (cross-product up straight)\n                   nil)]\n      (update-in state [:navigation-3d :position]\n                 #(v-plus % (v-mult dir step-size)))\n      state)))\n\n(defn- setup-3d-nav\n  \"Custom 'setup' function which creates initial position\n  configuration and puts it to the state map.\"\n  [user-setup user-settings]\n  (let [initial-state (-> user-settings\n                          (select-keys [:straight :up :position])\n                          (->> (merge (default-position)))\n                          (update-in [:straight] v-normalize)\n                          (update-in [:up] v-normalize))]\n    (update-in (user-setup) [:navigation-3d]\n               #(merge initial-state %))))\n\n(defn navigation-3d\n  \"Enables navigation in 3D space. Similar to how it is done in\n  shooters: WASD navigation, space is go up, z is go down,\n  drag mouse to look around.\"\n  [options]\n  (let [; 3d-navigation related user settings\n        user-settings (:navigation-3d options)\n        pixels-in-360 (:pixels-in-360 user-settings 1000)\n        step-size (:step-size user-settings 20)\n        rotate-on (:rotate-on user-settings :mouse-dragged)\n\n        ; user-provided handlers which will be overridden\n        ; by 3d-navigation\n        draw (:draw options (fn [state]))\n        key-pressed (:key-pressed options (fn [state _] state))\n        rotate-on-fn (rotate-on options (fn [state _] state))\n        setup (:setup options (fn [] {}))]\n    (assoc options\n\n           :setup (partial setup-3d-nav setup user-settings)\n\n           :draw (fn [state]\n                   (assert-state-has-navigation state)\n                   (let [{[c-x c-y c-z] :straight\n                          [u-x u-y u-z] :up\n                          [p-x p-y p-z] :position} (:navigation-3d state)]\n                     (q/camera p-x p-y p-z (+ p-x c-x) (+ p-y c-y) (+ p-z c-z) u-x u-y u-z))\n                   (draw state))\n\n           :key-pressed (fn [state event]\n                          (key-pressed (move state event step-size) event))\n\n           rotate-on (fn [state event]\n                       (rotate-on-fn (rotate state event pixels-in-360) event)))))\n"]}