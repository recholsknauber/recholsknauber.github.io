{"version":3,"sources":["quil/middlewares/fun_mode.cljc"],"mappings":"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","names":["quil.middlewares.fun-mode/wrap-setup","options","setup","cljs.core.assoc","cljs.core/reset!","quil.core/state-atom","quil.middlewares.fun-mode/wrap-draw-update","draw","_","update","cljs.core/identity","quil-draw","cljs.core.swap_BANG_","cljs.core._EQ_","quil.core/frame-count","G__16758","cljs.core.dissoc","quil.middlewares.fun-mode/mouse-event","quil.core/mouse-x","quil.core/mouse-y","quil.middlewares.fun-mode/mouse-event-full","quil.core/mouse-button","quil.middlewares.fun-mode/key-event","quil.core/key-as-keyword","quil.core/key-code","quil.core/raw-key","var_args","G__16770","quil.middlewares.fun-mode/wrap-handler","js/Error","handler-key","quil.middlewares.fun_mode.wrap_handler","event-fn","temp__5802__auto__","handler","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","quil.middlewares.fun-mode/wrap-handlers","seq16777","G__16778","cljs.core/first","cljs.core/next","self__5754__auto__","handlers","cljs.core.reduce","cljs.core/Keyword","cljs.core.apply","quil.middlewares.fun-mode/wrap-mouse-wheel","rotation","quil.middlewares.fun-mode/fun-mode","quil.middlewares.fun_mode.wrap_handlers","quil.core/pmouse-x","quil.core/pmouse-y"],"sourcesContent":["(ns quil.middlewares.fun-mode\n  (:require [quil.core :as q]))\n\n(defn- wrap-setup [options]\n  (let [setup (:setup options (fn [] nil))]\n    (assoc options\n           :setup #(reset! (q/state-atom) (setup)))))\n\n(defn- wrap-draw-update [options]\n  (let [draw (:draw options (fn [_]))\n        update (:update options identity)\n        quil-draw #(-> (q/state-atom)\n                       (swap! (if (= (q/frame-count) 1)\n                                identity\n                                update))\n                       (draw))]\n    (-> options\n        (dissoc :update)\n        (assoc :draw quil-draw))))\n\n(defn- mouse-event []\n  {:x (q/mouse-x)\n   :y (q/mouse-y)})\n\n(defn- mouse-event-full []\n  {:x (q/mouse-x)\n   :y (q/mouse-y)\n   :button (q/mouse-button)})\n\n(defn- key-event []\n  {:key (q/key-as-keyword)\n   :key-code (q/key-code)\n   :raw-key (q/raw-key)\n   #?@(:clj [:modifiers (q/key-modifiers)])})\n\n(defn- wrap-handler\n  ([options handler-key]\n   (wrap-handler options handler-key nil))\n  ([options handler-key event-fn]\n   (if-let [handler (options handler-key)]\n     (assoc options handler-key\n            (if event-fn\n              #(swap! (q/state-atom) handler (event-fn))\n              #(swap! (q/state-atom) handler)))\n     options)))\n\n(defn- wrap-handlers [options & handlers]\n  (reduce (fn [options handler]\n            (if (keyword? handler)\n              (wrap-handler options handler)\n              (apply wrap-handler options handler)))\n          options handlers))\n\n(defn- wrap-mouse-wheel [options]\n  (if-let [handler (:mouse-wheel options)]\n    (assoc options :mouse-wheel\n           (fn [rotation]\n             (swap! (q/state-atom) handler rotation)))\n    options))\n\n(defn fun-mode\n  \"Introduces `function mode` making all handlers (`setup`, `draw`,\n  `mouse-click`, etc) state-aware. Adds support for `update` function.\"\n  [options]\n  (-> options\n      wrap-setup\n      wrap-draw-update\n      (wrap-handlers :focus-gained :focus-lost [:mouse-entered mouse-event]\n                     [:mouse-exited mouse-event] [:mouse-pressed mouse-event-full]\n                     [:mouse-released mouse-event] [:mouse-clicked mouse-event-full]\n                     [:mouse-moved (fn [] {:x (q/mouse-x) :y (q/mouse-y)\n                                           :p-x (q/pmouse-x) :p-y (q/pmouse-y)})]\n                     [:mouse-dragged (fn [] {:x (q/mouse-x) :y (q/mouse-y)\n                                             :p-x (q/pmouse-x) :p-y (q/pmouse-y)\n                                             :button (q/mouse-button)})]\n                     [:key-pressed key-event] [:key-released key-event] [:key-typed key-event]\n                     :on-close)\n      wrap-mouse-wheel))\n"]}